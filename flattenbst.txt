Flatten Binary Tree to Linked List
Problem Statement: Given a Binary Tree, convert it to a Linked List where the linked list nodes follow the same order as the pre-order traversal of the binary tree.

Use the right pointer of the Binary Tree as the ‘next’ pointer for the linked list and set the left pointer to null. Do this in place and do not create extra nodes.
Input:Binary Tree: 1 2 5 3 4 -1 6 -1 -1 -1 -1 
Explanation: The given binary tree has a preorder traversal order of [1, 2, 3, 4, 5, 6, 7]. To flatten the tree, we convert it into a linked list. In this linked list, the nodes follow the same order as the preorder traversal. The right pointer of each node in the linked list serves the function of the 'next' pointer. Additionally, we set the left pointer of each node to null. This process is done in place, meaning we modify the existing binary tree structure to achieve the desired linked list representation.
Algorithm / Intuition

The intuition behind this approach is to perform a reverse pre-order traversal where, instead of simply visiting nodes, we flatten the tree into a linked list as we traverse it.

We start at the root of the tree and recursively do the following for each node, we first ensure that the right subtree is flattened into a linked list. This means that all nodes in the right subtree are processed and attached to the linked list in the correct order.
Algorithm

Step 1:Initialise a global variable `prev` to keep track of the previously processed node. Initially set it to null.

Step 2: Base Case: If the current node is null, return null.

Step 3: Flatten the Right and Left Subtree: Recursively flatten the right and left subtree of the current node by calling the flatten function on the current node's right and left child.
Step 4: Attach the Right Subtree to the Flattened Left Subtree: Set the right child of the current node to the value of `prev` since `prev` points to the rightmost node in the flattened left subtree. This effectively attaches the right subtree to the right of the rightmost node of the left subtree.

Step 5:Attach the Left Subtree as Right Child: Set the right child of the current node to the left subtree.

    Set the left child of the current node to null since we are flattening the binary tree to a linked list and there should be no left child.
